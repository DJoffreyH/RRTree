2025-07-25 17:33:15,422 - INFO - Creating container for sympy__sympy-14308...
2025-07-25 17:33:16,470 - INFO - Container for sympy__sympy-14308 created: 241a4bf1ff543eb1f4d85824b261792e2636fe5e07b00b7e090a0bf2dd512c03
2025-07-25 17:33:16,689 - INFO - Container for sympy__sympy-14308 started: 241a4bf1ff543eb1f4d85824b261792e2636fe5e07b00b7e090a0bf2dd512c03
2025-07-25 17:33:16,689 - INFO - Intermediate patch for sympy__sympy-14308 written to logs/run_evaluation/batch_25/gold/sympy__sympy-14308/patch.diff, now applying to container...
2025-07-25 17:33:16,897 - INFO - >>>>> Applied Patch:
Checking patch sympy/printing/pretty/pretty.py...
Applied patch sympy/printing/pretty/pretty.py cleanly.

2025-07-25 17:33:17,399 - INFO - Git diff before:
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 09e2b00735..9b8cd4a872 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -931,26 +931,49 @@ def _print_BasisDependent(self, expr):
         #Fixing the newlines
         lengths = []
         strs = ['']
+        flag = []
         for i, partstr in enumerate(o1):
+            flag.append(0)
             # XXX: What is this hack?
             if '\n' in partstr:
                 tempstr = partstr
                 tempstr = tempstr.replace(vectstrs[i], '')
-                tempstr = tempstr.replace(u'\N{RIGHT PARENTHESIS UPPER HOOK}',
-                                          u'\N{RIGHT PARENTHESIS UPPER HOOK}'
-                                          + ' ' + vectstrs[i])
+                if u'\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction
+                    for paren in range(len(tempstr)):
+                        flag[i] = 1
+                        if tempstr[paren] == u'\N{right parenthesis extension}':
+                            tempstr = tempstr[:paren] + u'\N{right parenthesis extension}'\
+                                         + ' '  + vectstrs[i] + tempstr[paren + 1:]
+                            break
+                elif u'\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:
+                    flag[i] = 1
+                    tempstr = tempstr.replace(u'\N{RIGHT PARENTHESIS LOWER HOOK}',
+                                        u'\N{RIGHT PARENTHESIS LOWER HOOK}'
+                                        + ' ' + vectstrs[i])
+                else:
+                    tempstr = tempstr.replace(u'\N{RIGHT PARENTHESIS UPPER HOOK}',
+                                        u'\N{RIGHT PARENTHESIS UPPER HOOK}'
+                                        + ' ' + vectstrs[i])
                 o1[i] = tempstr
+
         o1 = [x.split('\n') for x in o1]
-        n_newlines = max([len(x) for x in o1])
-        for parts in o1:
-            lengths.append(len(parts[0]))
+        n_newlines = max([len(x) for x in o1])  # Width of part in its pretty form
+
+        if 1 in flag:                           # If there was a fractional scalar
+            for i, parts in enumerate(o1):
+                if len(parts) == 1:             # If part has no newline
+                    parts.insert(0, ' ' * (len(parts[0])))
+                    flag[i] = 1
+
+        for i, parts in enumerate(o1):
+            lengths.append(len(parts[flag[i]]))
             for j in range(n_newlines):
                 if j+1 <= len(parts):
                     if j >= len(strs):
                         strs.append(' ' * (sum(lengths[:-1]) +
                                            3*(len(lengths)-1)))
-                    if j == 0:
-                        strs[0] += parts[0] + ' + '
+                    if j == flag[i]:
+                        strs[flag[i]] += parts[flag[i]] + ' + '
                     else:
                         strs[j] += parts[j] + ' '*(lengths[-1] -
                                                    len(parts[j])+
2025-07-25 17:33:17,399 - INFO - Eval script for sympy__sympy-14308 written to logs/run_evaluation/batch_25/gold/sympy__sympy-14308/eval.sh; copying to container...
2025-07-25 17:33:38,445 - INFO - Test runtime: 20.99 seconds
2025-07-25 17:33:38,445 - INFO - Test output for sympy__sympy-14308 written to logs/run_evaluation/batch_25/gold/sympy__sympy-14308/test_output.txt
2025-07-25 17:33:38,559 - INFO - Git diff after:
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 09e2b00735..9b8cd4a872 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -931,26 +931,49 @@ def _print_BasisDependent(self, expr):
         #Fixing the newlines
         lengths = []
         strs = ['']
+        flag = []
         for i, partstr in enumerate(o1):
+            flag.append(0)
             # XXX: What is this hack?
             if '\n' in partstr:
                 tempstr = partstr
                 tempstr = tempstr.replace(vectstrs[i], '')
-                tempstr = tempstr.replace(u'\N{RIGHT PARENTHESIS UPPER HOOK}',
-                                          u'\N{RIGHT PARENTHESIS UPPER HOOK}'
-                                          + ' ' + vectstrs[i])
+                if u'\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction
+                    for paren in range(len(tempstr)):
+                        flag[i] = 1
+                        if tempstr[paren] == u'\N{right parenthesis extension}':
+                            tempstr = tempstr[:paren] + u'\N{right parenthesis extension}'\
+                                         + ' '  + vectstrs[i] + tempstr[paren + 1:]
+                            break
+                elif u'\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:
+                    flag[i] = 1
+                    tempstr = tempstr.replace(u'\N{RIGHT PARENTHESIS LOWER HOOK}',
+                                        u'\N{RIGHT PARENTHESIS LOWER HOOK}'
+                                        + ' ' + vectstrs[i])
+                else:
+                    tempstr = tempstr.replace(u'\N{RIGHT PARENTHESIS UPPER HOOK}',
+                                        u'\N{RIGHT PARENTHESIS UPPER HOOK}'
+                                        + ' ' + vectstrs[i])
                 o1[i] = tempstr
+
         o1 = [x.split('\n') for x in o1]
-        n_newlines = max([len(x) for x in o1])
-        for parts in o1:
-            lengths.append(len(parts[0]))
+        n_newlines = max([len(x) for x in o1])  # Width of part in its pretty form
+
+        if 1 in flag:                           # If there was a fractional scalar
+            for i, parts in enumerate(o1):
+                if len(parts) == 1:             # If part has no newline
+                    parts.insert(0, ' ' * (len(parts[0])))
+                    flag[i] = 1
+
+        for i, parts in enumerate(o1):
+            lengths.append(len(parts[flag[i]]))
             for j in range(n_newlines):
                 if j+1 <= len(parts):
                     if j >= len(strs):
                         strs.append(' ' * (sum(lengths[:-1]) +
                                            3*(len(lengths)-1)))
-                    if j == 0:
-                        strs[0] += parts[0] + ' + '
+                    if j == flag[i]:
+                        strs[flag[i]] += parts[flag[i]] + ' + '
                     else:
                         strs[j] += parts[j] + ' '*(lengths[-1] -
                                                    len(parts[j])+
2025-07-25 17:33:38,559 - INFO - Grading answer for sympy__sympy-14308...
2025-07-25 17:33:38,563 - INFO - report: {'sympy__sympy-14308': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': True, 'tests_status': {'FAIL_TO_PASS': {'success': ['test_issue_12675', 'test_pretty_print_unicode'], 'failure': []}, 'PASS_TO_PASS': {'success': ['test_pretty_ascii_str', 'test_pretty_unicode_str', 'test_upretty_greek', 'test_upretty_multiindex', 'test_upretty_sub_super', 'test_upretty_subs_missing_in_24', 'test_upretty_modifiers', 'test_pretty_Cycle', 'test_pretty_basic', 'test_negative_fractions', 'test_issue_5524', 'test_pretty_ordering', 'test_EulerGamma', 'test_GoldenRatio', 'test_pretty_relational', 'test_Assignment', 'test_AugmentedAssignment', 'test_issue_7117', 'test_pretty_rational', 'test_pretty_functions', 'test_pretty_sqrt', 'test_pretty_sqrt_char_knob', 'test_pretty_sqrt_longsymbol_no_sqrt_char', 'test_pretty_KroneckerDelta', 'test_pretty_product', 'test_pretty_lambda', 'test_pretty_order', 'test_pretty_derivatives', 'test_pretty_integrals', 'test_pretty_matrix', 'test_pretty_ndim_arrays', 'test_tensor_TensorProduct', 'test_diffgeom_print_WedgeProduct', 'test_Adjoint', 'test_pretty_Trace_issue_9044', 'test_MatrixExpressions', 'test_pretty_dotproduct', 'test_pretty_piecewise', 'test_pretty_ITE', 'test_pretty_seq', 'test_any_object_in_sequence', 'test_print_builtin_set', 'test_pretty_sets', 'test_pretty_SetExpr', 'test_pretty_ImageSet', 'test_pretty_ConditionSet', 'test_pretty_ComplexRegion', 'test_pretty_Union_issue_10414', 'test_pretty_Intersection_issue_10414', 'test_ProductSet_paranthesis', 'test_ProductSet_prod_char_issue_10413', 'test_pretty_sequences', 'test_pretty_FourierSeries', 'test_pretty_FormalPowerSeries', 'test_pretty_limits', 'test_pretty_ComplexRootOf', 'test_pretty_RootSum', 'test_GroebnerBasis', 'test_pretty_Boolean', 'test_pretty_Domain', 'test_pretty_prec', 'test_pprint', 'test_pretty_class', 'test_pretty_no_wrap_line', 'test_settings', 'test_pretty_sum', 'test_units', 'test_pretty_Subs', 'test_gammas', 'test_beta', 'test_function_subclass_different_name', 'test_SingularityFunction', 'test_deltas', 'test_hyper', 'test_meijerg', 'test_noncommutative', 'test_pretty_special_functions', 'test_expint', 'test_elliptic_functions', 'test_RandomDomain', 'test_PrettyPoly', 'test_issue_6285', 'test_issue_6359', 'test_issue_6739', 'test_complicated_symbol_unchanged', 'test_categories', 'test_PrettyModules', 'test_QuotientRing', 'test_Homomorphism', 'test_Tr', 'test_pretty_Add', 'test_issue_7179', 'test_issue_7180', 'test_pretty_Complement', 'test_pretty_SymmetricDifference', 'test_pretty_Contains', 'test_issue_4335', 'test_issue_6324', 'test_issue_7927', 'test_issue_6134', 'test_issue_9877', 'test_issue_13651', 'test_pretty_primenu', 'test_pretty_primeomega', 'test_pretty_Mod', 'test_issue_11801', 'test_pretty_UnevaluatedExpr', 'test_issue_10472', 'test_MatrixElement_printing', 'test_MatrixSymbol_printing', 'test_degree_printing', 'test_str_printing', 'test_latex_printing'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-14308: resolved: True
2025-07-25 17:33:38,563 - INFO - Attempting to stop container sweb.eval.sympy__sympy-14308.batch_25...
2025-07-25 17:33:53,866 - INFO - Attempting to remove container sweb.eval.sympy__sympy-14308.batch_25...
2025-07-25 17:33:53,908 - INFO - Container sweb.eval.sympy__sympy-14308.batch_25 removed.
2025-07-25 17:33:53,908 - INFO - Attempting to remove image swebench/sweb.eval.x86_64.sympy_1776_sympy-14308:latest...
2025-07-25 17:33:54,074 - INFO - Image swebench/sweb.eval.x86_64.sympy_1776_sympy-14308:latest removed.
