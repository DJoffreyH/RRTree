2025-07-25 17:17:33,220 - INFO - Creating container for sympy__sympy-12481...
2025-07-25 17:17:34,222 - INFO - Container for sympy__sympy-12481 created: 2eb2a69b450e05fd862166c235dc52ad84c43b03ae251b4a489f29b4c6699e66
2025-07-25 17:17:34,395 - INFO - Container for sympy__sympy-12481 started: 2eb2a69b450e05fd862166c235dc52ad84c43b03ae251b4a489f29b4c6699e66
2025-07-25 17:17:34,396 - INFO - Intermediate patch for sympy__sympy-12481 written to logs/run_evaluation/batch_24/gold/sympy__sympy-12481/patch.diff, now applying to container...
2025-07-25 17:17:34,503 - INFO - >>>>> Applied Patch:
Checking patch sympy/combinatorics/permutations.py...
Applied patch sympy/combinatorics/permutations.py cleanly.

2025-07-25 17:17:34,867 - INFO - Git diff before:
diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..4ac1c2ef3b 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -895,12 +895,8 @@ def __new__(cls, *args, **kwargs):
         # counting starts from 1.
 
         temp = flatten(args)
-        if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
-                raise ValueError('there were repeated elements.')
+        if has_dups(temp) and not is_cycle:
+            raise ValueError('there were repeated elements.')
         temp = set(temp)
 
         if not is_cycle and \
2025-07-25 17:17:34,868 - INFO - Eval script for sympy__sympy-12481 written to logs/run_evaluation/batch_24/gold/sympy__sympy-12481/eval.sh; copying to container...
2025-07-25 17:17:39,790 - INFO - Test runtime: 4.86 seconds
2025-07-25 17:17:39,790 - INFO - Test output for sympy__sympy-12481 written to logs/run_evaluation/batch_24/gold/sympy__sympy-12481/test_output.txt
2025-07-25 17:17:39,860 - INFO - Git diff after:
diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..4ac1c2ef3b 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -895,12 +895,8 @@ def __new__(cls, *args, **kwargs):
         # counting starts from 1.
 
         temp = flatten(args)
-        if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
-                raise ValueError('there were repeated elements.')
+        if has_dups(temp) and not is_cycle:
+            raise ValueError('there were repeated elements.')
         temp = set(temp)
 
         if not is_cycle and \
2025-07-25 17:17:39,860 - INFO - Grading answer for sympy__sympy-12481...
2025-07-25 17:17:39,861 - INFO - report: {'sympy__sympy-12481': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': True, 'tests_status': {'FAIL_TO_PASS': {'success': ['test_args'], 'failure': []}, 'PASS_TO_PASS': {'success': ['test_Permutation', 'test_josephus', 'test_ranking', 'test_mul', 'test_Cycle', 'test_from_sequence', 'test_printing_cyclic'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-12481: resolved: True
2025-07-25 17:17:39,861 - INFO - Attempting to stop container sweb.eval.sympy__sympy-12481.batch_24...
2025-07-25 17:17:56,846 - INFO - Attempting to remove container sweb.eval.sympy__sympy-12481.batch_24...
2025-07-25 17:17:56,878 - INFO - Container sweb.eval.sympy__sympy-12481.batch_24 removed.
2025-07-25 17:17:56,879 - INFO - Attempting to remove image swebench/sweb.eval.x86_64.sympy_1776_sympy-12481:latest...
2025-07-25 17:17:57,178 - INFO - Image swebench/sweb.eval.x86_64.sympy_1776_sympy-12481:latest removed.
